// Copyright (c) 2025 Bytedance Ltd. and/or its affiliates
// SPDX-License-Identifier: MIT

import { useState, useEffect } from "react";
import { useMessage } from "~/core/store";
import { MarkdownWithThinking } from "~/components/deer-flow/markdown-with-thinking";

interface TavilySource {
  type: string;
  title: string;
  url: string;
  score?: number;
  content?: string;
}

interface TavilySourcesSectionProps {
  messageId: string;
}

export function TavilySourcesSection({ messageId }: TavilySourcesSectionProps) {
  const [sourcesMarkdown, setSourcesMarkdown] = useState<string>("");
  const message = useMessage(messageId);

  useEffect(() => {
    // Get tavily sources from the message
    const tavilySources = message?.tavilySources || [];
    
    console.log("TavilySourcesSection - Message:", message);
    console.log("TavilySourcesSection - Sources:", tavilySources);
    
    // Generate sources markdown if we have sources
    if (tavilySources.length > 0) {
      const markdown = generateSourcesMarkdown(tavilySources);
      console.log("TavilySourcesSection - Generated markdown:", markdown);
      setSourcesMarkdown(markdown);
    } else {
      setSourcesMarkdown("");
      console.log("TavilySourcesSection - No sources found");
    }
  }, [message?.tavilySources]);

  const generateSourcesMarkdown = (sources: TavilySource[]): string => {
    if (!sources || sources.length === 0) return "";

    let markdown = "\n\n---\n\n# 📚 Research Sources\n\n";
    markdown += "The following sources were used during the research process:\n\n";

    // Add individual sources
    sources.forEach((source, index) => {
      const domain = extractDomain(source.url);
      const faviconUrl = `https://www.google.com/s2/favicons?domain=${domain}&sz=16`;
      const qualityIndicator = getQualityIndicator(source.score || 0);
      
      markdown += `### ${index + 1}. ![${domain} favicon](${faviconUrl}) [${source.title}](${source.url})\n\n`;
      markdown += `**Quality Score:** ${qualityIndicator} (${((source.score || 0) * 100).toFixed(0)}%)\n\n`;
      if (source.content) {
        const preview = source.content.substring(0, 150) + "...";
        markdown += `**Preview:** ${preview}\n\n`;
      }
    });

    // Add domain summary
    const domainCounts = sources.reduce((acc, source) => {
      const domain = extractDomain(source.url);
      acc[domain] = (acc[domain] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const sortedDomains = Object.entries(domainCounts).sort(([,a], [,b]) => b - a);

    if (sortedDomains.length > 0) {
      markdown += "## 🌐 Source Domains\n\n";
      sortedDomains.forEach(([domain, count]) => {
        const faviconUrl = `https://www.google.com/s2/favicons?domain=${domain}&sz=16`;
        const plural = count === 1 ? "source" : "sources";
        markdown += `- ![${domain} favicon](${faviconUrl}) **${domain}** (${count} ${plural})\n`;
      });
      markdown += "\n";
    }

    // Add test section
    markdown += "---\n\n## 🔬 Test Section\n\n";
    markdown += "This is a test section added to verify that the Tavily sources section is rendering correctly in the frontend!\n\n";
    markdown += "*Generated by the DeepMed-RLX system.*\n\n";

    return markdown;
  };

  const extractDomain = (url: string): string => {
    try {
      const parsedUrl = new URL(url);
      return parsedUrl.hostname;
    } catch {
      return "unknown";
    }
  };

  const getQualityIndicator = (score: number): string => {
    if (score >= 0.9) return "🟢 Excellent";
    if (score >= 0.8) return "🟡 Good";
    if (score >= 0.7) return "🟠 Fair";
    return "🔴 Poor";
  };

  // Only render if we have sources
  if (!sourcesMarkdown) {
    return null;
  }

  return (
    <div className="mt-8 pt-4 border-t border-border/40">
      <MarkdownWithThinking>
        {sourcesMarkdown}
      </MarkdownWithThinking>
    </div>
  );
} 